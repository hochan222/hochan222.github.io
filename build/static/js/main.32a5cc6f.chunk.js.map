{"version":3,"sources":["Components/Navigation/index.js","Components/Page/Texts/index.js","Components/Page/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","handleDrawerToggle","setState","toggle","state","classes","this","className","root","AppBar","position","IconButton","menuButton","color","onClick","Drawer","open","MenuItem","Link","component","RouterLink","to","id","style","margin","marginTop","React","cloneElement","children","Component","withStyles","flexGrow","marginRight","Texts","Card","CardContent","Home","App","Fragment","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+XAsBMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAKdC,mBAAqB,kBAAM,EAAKC,SAAS,CAACC,QAAS,EAAKC,MAAMD,UAJtD,EAAKC,MAAO,CACRD,QAAQ,GAHG,E,sEAOb,IACEE,EAAYC,KAAKN,MAAjBK,QACR,OACI,6BACI,yBAAKE,UAAWF,EAAQG,MACpB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAAYJ,UAAWF,EAAQO,WAAYC,MAAM,UAAUC,QAASR,KAAKL,oBACrE,kBAAC,IAAD,QAGR,kBAACc,EAAA,EAAD,CAAQC,KAAMV,KAAKF,MAAMD,QACrB,kBAACc,EAAA,EAAD,CAAUH,QAASR,KAAKL,oBACpB,kBAACiB,EAAA,EAAD,CAAMC,UAAWC,IAAYC,GAAG,KAC5B,kBAAC,IAAD,QAGR,kBAACJ,EAAA,EAAD,CAAUH,QAASR,KAAKL,oBACpB,kBAACiB,EAAA,EAAD,CAAMC,UAAWC,IAAYC,GAAG,UAC5B,kBAAC,IAAD,UAKhB,yBAAKC,GAAG,UAAUC,MAAO,CAACC,OAAQ,OAAQC,UAAW,SAChDC,IAAMC,aAAarB,KAAKN,MAAM4B,gB,GAhCtBF,IAAMG,WAuChBC,cAhDA,CACXtB,KAAM,CACFuB,SAAU,GAEdnB,WAAY,CACRoB,YAAa,SA2CNF,CAAmB/B,G,gBC7CnBkC,E,iLAVP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,mB,GAJIT,IAAMG,WCYXO,E,iLAVP,OACI,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,4B,GAJGT,IAAMG,W,QCkBVQ,MAff,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIrB,UAAWiB,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,SAASrB,UAAWc,SCF9BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32a5cc6f.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Drawer from '@material-ui/core/Drawer';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport HomeIcon from '@material-ui/icons/Home';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: 'auto'\n    },\n};\n\nclass Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            toggle: false\n        };\n    }\nhandleDrawerToggle = () => this.setState({toggle: !this.state.toggle})\nrender() {\n    const { classes } = this.props;\n    return (\n        <div>\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <IconButton className={classes.menuButton} color=\"inherit\" onClick={this.handleDrawerToggle}>\n                        <MenuIcon/>\n                    </IconButton>\n                </AppBar>\n                <Drawer open={this.state.toggle}>\n                    <MenuItem onClick={this.handleDrawerToggle}>\n                        <Link component={RouterLink} to=\"/\">\n                            <HomeIcon />\n                        </Link>\n                    </MenuItem>\n                    <MenuItem onClick={this.handleDrawerToggle}>\n                        <Link component={RouterLink} to=\"/texts\">\n                            <TextFieldsIcon />\n                        </Link> \n                    </MenuItem>\n                </Drawer>\n            </div>\n            <div id=\"content\" style={{margin: 'auto', marginTop: '20px'}}>\n                {React.cloneElement(this.props.children)}\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(Navigation);\n\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nclass Texts extends React.Component {\n    render() {\n        return (\n            <Card>\n                <CardContent>\n                    Texts\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default Texts;","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <Card>\n                <CardContent>\n                    React template\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Navigation from './Components/Navigation';\nimport Texts from './Components/Page/Texts';\nimport Home from './Components/Page/Home';\n\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Navigation>\n          <div>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/texts\" component={Texts}/>\n          </div>\n        </Navigation>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}